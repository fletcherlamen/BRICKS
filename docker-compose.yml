version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: brick_orchestration_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-brick_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-brick_password}
      POSTGRES_DB: ${POSTGRES_DB:-brick_orchestration}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - brick_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-brick_user} -d ${POSTGRES_DB:-brick_orchestration}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: brick_orchestration_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - brick_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: brick_orchestration_backend
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-brick_user}:${POSTGRES_PASSWORD:-brick_password}@postgres:5432/${POSTGRES_DB:-brick_orchestration}
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/venv
    networks:
      - brick_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: brick_orchestration_frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=development
      - HOST=0.0.0.0
      - DANGEROUSLY_DISABLE_HOST_CHECK=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - brick_network
    restart: unless-stopped
    depends_on:
      - backend

  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: brick_orchestration_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - brick_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  brick_network:
    driver: bridge
